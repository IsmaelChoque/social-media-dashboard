{"version":3,"sources":["components/Header/Header.jsx","components/Switch/Switch.jsx","components/TopCardList/Card.jsx","components/TopCardList/TopCardList.jsx","components/Overview/CardSmall.jsx","components/Overview/Overview.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","children","className","Switch","setDarkMode","checked","setChecked","ref","useRef","onChange","current","type","id","htmlFor","Card","data","username","followers","todayFollowers","icon","name","cardClass","src","alt","cardListData","TopCardList","map","cardData","key","CardSmall","pageViews","growth","cardSmallList","Overview","dataList","App","useState","darkMode","mainClass","changeMedia","mq","matches","useEffect","window","matchMedia","addListener","removeListener","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5e42f51b.chunk.js","sourcesContent":["import React from 'react'\nimport './Header.css'\n\nconst Header = ({children}) => {\n  return (\n    <header className=\"header\">\n      <div className=\"wrapper\">\n        <div className=\"header-grid\">\n          <div>\n            <h1>Social Media Dashboard</h1>\n            <p className=\"header-total\">\n              Total Followers: 23, 004\n            </p>\n          </div>\n          {children}\n        </div>\n      </div>\n    </header>\n  );\n}\n \nexport default Header;","import React, { useRef } from 'react'\nimport './Switch.css'\n\nconst Switch = ({setDarkMode, checked, setChecked}) => {\n  \n  const ref = useRef(null)\n\n  const handleChange = () => {\n    setChecked(ref.current.checked)\n    setDarkMode(ref.current.checked)\n  }\n  \n  return (\n    <div className=\"dark-mode\">\n      <p className=\"dark-mode-title\">\n        {checked ? 'Dark ' : 'Light '}\n        Mode\n      </p>\n      <input ref={ref} onChange={handleChange} checked={checked} type=\"checkbox\" className=\"checkbox\" id=\"checkbox\"/>\n      <label className=\"switch\" htmlFor=\"checkbox\"></label>\n    </div>\n  );\n}\n \nexport default Switch;","import React from 'react'\nimport './Card.css'\n\nconst Card = ({data}) => {\n\n  const {username, followers, todayFollowers, icon, name} = data\n\n  const cardClass = `card ${name}`\n\n  return (\n    <article className={cardClass}>\n      <p className=\"card-title\">\n        <img src={icon} alt=\"imagen\"/>\n        {username}\n      </p>\n      <p className=\"card-followers\">\n        <span className=\"card-followers-number\">{followers}</span>\n        <span className=\"card-followers-title\">Followers</span>\n      </p>\n      <p className=\"card-today\">\n        {todayFollowers < 0 \n        ? \n          <img src=\"images/icon-down.svg\" alt=\"down\"/>\n        : \n          <img src=\"images/icon-up.svg\" alt=\"up\"/>\n        }\n        {todayFollowers} Today\n      </p>\n    </article>\n  );\n}\n \nexport default Card;","import React from 'react'\nimport './TopCardList.css'\nimport Card from './Card'\n\nconst cardListData = [\n  {\n    username: '@_isma_ch',\n    id: 1,\n    followers: '1596',\n    todayFollowers: 12,\n    icon: 'images/icon-facebook.svg',\n    name: 'facebook'\n  }, {\n    username: '@_isma_ch',\n    id: 2,\n    followers: '28k',\n    todayFollowers: 20,\n    icon: 'images/icon-twitter.svg',\n    name: 'twitter'\n  }, {\n    username: '@_isma_ch',\n    id: 3,\n    followers: '6k',\n    todayFollowers: 30,\n    icon: 'images/icon-instagram.svg',\n    name: 'instagram'\n  }, {\n    username: '@_isma_ch',\n    id: 4,\n    followers: '12k',\n    todayFollowers: -50,\n    icon: 'images/icon-youtube.svg',\n    name: 'youtube'\n  }\n]\n\nconst TopCardList = () => {\n  return (\n    <section className=\"top-cards\">\n      <div className=\"wrapper\">\n        <div className=\"grid\">\n          {cardListData.map(cardData => (\n            <Card\n              key={cardData.id}\n              data={cardData}\n            />\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n \nexport default TopCardList;","import React from 'react'\nimport './CardSmall.css'\n\nconst CardSmall = ({icon, pageViews, growth}) => {\n  return (\n    <div className=\"card-small\">\n      <p className=\"card-small-views\">Page Views</p>\n      <p className=\"card-small-icon\">\n        <img src={icon} alt=\"imagen\"/>\n      </p>\n      <p className=\"card-small-number\">\n        {pageViews}\n      </p>\n      <p className=\"card-small-percentage\">\n        <span>\n          {growth < 0\n          ?\n            <img src=\"images/icon-down.svg\" alt=\"down\"/>\n          :\n            <img src=\"images/icon-up.svg\" alt=\"up\"/>\n          }\n          {growth}%\n        </span>\n      </p>\n    </div>\n  );\n}\n \nexport default CardSmall;","import React from 'react'\nimport './Overview.css'\nimport CardSmall from './CardSmall'\n\nconst cardSmallList = [\n  {\n    icon: 'images/icon-facebook.svg',\n    pageViews: '87',\n    growth: 3,\n    key: 1\n  }, {\n    icon: 'images/icon-facebook.svg',\n    pageViews: '52',\n    growth: 2257,\n    key: 2\n  }, {\n    icon: 'images/icon-facebook.svg',\n    pageViews: '5462',\n    growth: 1375,\n    key: 3\n  }, {\n    icon: 'images/icon-facebook.svg',\n    pageViews: '117',\n    growth: 303,\n    key: 4\n  }\n]\n\nconst Overview = () => {\n  return (\n    <section className=\"overview\">\n      <div className=\"wrapper\">\n        <h2>Overview - Today</h2>\n        <div className=\"grid\">\n          {cardSmallList.map(dataList => (\n            <CardSmall\n              key={dataList.key}\n              icon={dataList.icon}\n              pageViews={dataList.pageViews}\n              growth={dataList.growth}\n            />\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n \nexport default Overview;","import React, { useState, useEffect } from 'react';\nimport './Globals.css'\nimport Header from './components/Header/Header';\nimport Switch from './components/Switch/Switch';\nimport TopCardList from './components/TopCardList/TopCardList';\nimport Overview from './components/Overview/Overview';\n\nfunction App() {\n  \n  const [darkMode, setDarkMode] = useState(false)\n  const [checked, setChecked] = useState(false)\n\n  const mainClass = darkMode ? 'is-dark-mode' : 'is-light-mode'\n\n  function changeMedia(mq) {\n    setDarkMode(mq.matches)\n    setChecked(mq.matches)\n  }\n\n  useEffect(() => {\n    const mq = window.matchMedia('(prefers-color-scheme: dark)')\n    mq.addListener(changeMedia)\n    setDarkMode(mq.matches)\n    setChecked(mq.matches)\n    return () => {\n      mq.removeListener(changeMedia)\n    }\n  }, [])\n\n  return (\n    <main className={mainClass}>\n      <Header>\n        <Switch\n          setDarkMode={setDarkMode}\n          checked={checked}\n          setChecked={setChecked}\n        />\n      </Header>\n      <TopCardList/>\n      <Overview/>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}